{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prasa\\\\Downloads\\\\react\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Fetch  user all notes on database\n  const getNotes = async () => {\n    // ToDo: API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(Array.isArray(json) ? json : []);\n    // setNotes(json);\n  };\n\n  // // Add a new note\n  //   const addNote = async (title, description, tag) => {\n  //     // ToDo: API call\n  //      // eslint-disable-next-line\n  //     const response  = await fetch(`${host}/api/notes/addnote`, {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"auth-token\":localStorage.getItem('token')\n  //       },\n  //       body: JSON.stringify({ title, description, tag }),\n  //     });\n\n  //     const note = await response.json();\n\n  //     if (Array.isArray(notes)) {\n  //       setNotes([...notes, note]); // Use spread operator to add new note\n  //     } else {\n  //       console.error(\"Notes state is not an array:\", notes);\n  //       setNotes([note]); // Reset `notes` to an array if it’s not\n  //     }\n\n  //     // console.log(note);\n  //     // if (note && note._id) {\n  //     //   setNotes([...notes, note]); // Spread operator ensures notes remain an array\n  //     // } else {\n  //     //   console.error(\"Invalid note response:\", note);\n  //     // }\n  //     // setNotes(notes.concat(note));\n\n  //     // console.log(json)\n  //   };\n\n  const addNote = async (title, description, tag) => {\n    try {\n      const response = await fetch(`${host}/api/notes/addnote`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag\n        })\n      });\n      const note = await response.json();\n\n      // Ensure the response contains a valid note object\n      if (response.ok && note && note._id) {\n        if (Array.isArray(notes)) {\n          setNotes([...notes, note]); // Append the new note to the existing array\n        } else {\n          console.error(\"Notes state is not an array:\", notes);\n          setNotes([note]); // Reset notes to an array with the new note\n        }\n      } else {\n        console.error(\"Failed to add note:\", note);\n        alert(\"Error adding note. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"An error occurred:\", error);\n      alert(\"An error occurred while adding the note.\");\n    }\n  };\n\n  // Delete a existing note\n  const deleteNote = async id => {\n    // ToDo :  API call\n    const responce = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await responce.json();\n    console.log(json);\n    console.log(\"Deleting note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a existing note\n  const editNote = async (id, title, description, tag) => {\n    // ToDo: API call\n    const responce = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    // eslint-disable-next-line\n    const json = await responce.json();\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    //logic to edit notes in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","Array","isArray","addNote","title","description","tag","body","JSON","stringify","note","ok","_id","error","alert","deleteNote","id","responce","newNotes","filter","editNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/prasa/Downloads/react/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const notesInitial = []\r\n  const [notes, setNotes] = useState(notesInitial);\r\n\r\n// Fetch  user all notes on database\r\n  const getNotes = async () => {\r\n    // ToDo: API call\r\n    const response  = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":localStorage.getItem('token')\r\n      }\r\n    });\r\n    const json = await response.json();\r\n    console.log(json);\r\n    setNotes(Array.isArray(json) ? json : []);\r\n    // setNotes(json);\r\n  };\r\n\r\n// // Add a new note\r\n//   const addNote = async (title, description, tag) => {\r\n//     // ToDo: API call\r\n//      // eslint-disable-next-line\r\n//     const response  = await fetch(`${host}/api/notes/addnote`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"auth-token\":localStorage.getItem('token')\r\n//       },\r\n//       body: JSON.stringify({ title, description, tag }),\r\n//     });\r\n\r\n//     const note = await response.json();\r\n    \r\n//     if (Array.isArray(notes)) {\r\n//       setNotes([...notes, note]); // Use spread operator to add new note\r\n//     } else {\r\n//       console.error(\"Notes state is not an array:\", notes);\r\n//       setNotes([note]); // Reset `notes` to an array if it’s not\r\n//     }\r\n\r\n//     // console.log(note);\r\n//     // if (note && note._id) {\r\n//     //   setNotes([...notes, note]); // Spread operator ensures notes remain an array\r\n//     // } else {\r\n//     //   console.error(\"Invalid note response:\", note);\r\n//     // }\r\n//     // setNotes(notes.concat(note));\r\n\r\n//     // console.log(json)\r\n//   };\r\n\r\n  const addNote = async (title, description, tag) => {\r\n    try {\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"auth-token\": localStorage.getItem(\"token\"),\r\n            },\r\n            body: JSON.stringify({ title, description, tag }),\r\n        });\r\n\r\n        const note = await response.json();\r\n\r\n        // Ensure the response contains a valid note object\r\n        if (response.ok && note && note._id) {\r\n            if (Array.isArray(notes)) {\r\n                setNotes([...notes, note]); // Append the new note to the existing array\r\n            } else {\r\n                console.error(\"Notes state is not an array:\", notes);\r\n                setNotes([note]); // Reset notes to an array with the new note\r\n            }\r\n        } else {\r\n            console.error(\"Failed to add note:\", note);\r\n            alert(\"Error adding note. Please try again.\");\r\n        }\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        alert(\"An error occurred while adding the note.\");\r\n    }\r\n};\r\n\r\n\r\n// Delete a existing note\r\n  const deleteNote =  async (id) => {\r\n\r\n    // ToDo :  API call\r\n    const responce = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":localStorage.getItem('token')\r\n      }\r\n    });\r\n    const json = await responce.json();\r\n    console.log(json);\r\n\r\n    console.log(\"Deleting note with id\" + id);\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNotes);\r\n  };\r\n\r\n// Edit a existing note\r\n  const editNote = async (id, title, description, tag) => {\r\n    // ToDo: API call\r\n    const responce = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":localStorage.getItem('token')\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n     // eslint-disable-next-line\r\n    const json = await responce.json();\r\n\r\n\r\n    let newNotes = JSON.parse(JSON.stringify(notes));\r\n    //logic to edit notes in client\r\n\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = newNotes[index];\r\n      if (element._id === id) {\r\n        newNotes[index].title = title;\r\n        newNotes[index].description = description;\r\n        newNotes[index].tag = tag;\r\n        break;\r\n      }\r\n    }\r\n    setNotes(newNotes);\r\n  };\r\n    \r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes }}>\r\n       {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}